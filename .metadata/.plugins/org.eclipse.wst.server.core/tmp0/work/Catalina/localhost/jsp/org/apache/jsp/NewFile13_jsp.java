/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.55
 * Generated at: 2020-09-23 06:44:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class NewFile13_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

    Calendar cal = Calendar.getInstance();
    int year = request.getParameter("y") == null ? cal.get(Calendar.YEAR) : Integer.parseInt(request.getParameter("y"));
    int month = request.getParameter("m") == null ? cal.get(Calendar.MONTH) : (Integer.parseInt(request.getParameter("m")) - 1);

    // ìììì¼ íì¸
    // - Calendar MONTHë 0-11ê¹ì§ì
    cal.set(year, month, 1);
    int bgnWeek = cal.get(Calendar.DAY_OF_WEEK);

    // ë¤ì/ì´ì ì ê³ì°
    // - MONTH ê³ì°ì íê¸°ìë¡ ê³ì°íê¸° ëë¬¸ì +1ì í ìíìì ê³ì°í¨
    int prevYear = year;
    int prevMonth = (month + 1) - 1;
    int nextYear = year;
    int nextMonth = (month  + 1) + 1;

    // 1ìì¸ ê²½ì° ì´ì ë 12ìë¡ ì§ì 
    if (prevMonth < 1) {
        prevYear--;
        prevMonth = 12;
    }

    // 12ìì¸ ê²½ì° ë¤ìë 1ìë¡ ì§ì 
    if (nextMonth > 12) {
        nextYear++;
        nextMonth = 1;
    }

      out.write("\r\n");
      out.write("<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n");
      out.write("<tr>\r\n");
      out.write("    <td align=\"center\"><a href=\"./calendar.jsp?y=");
      out.print(prevYear);
      out.write('&');
      out.write('m');
      out.write('=');
      out.print(prevMonth);
      out.write("\">â</a> ");
      out.print(year);
      out.write("ë ");
      out.print(month+1);
      out.write("ì <a href=\"./calendar.jsp?y=");
      out.print(nextYear);
      out.write('&');
      out.write('m');
      out.write('=');
      out.print(nextMonth);
      out.write("\">â·</a></td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("    <td>\r\n");
      out.write("\r\n");
      out.write("        <table border=\"1\">\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>ì¼</td>\r\n");
      out.write("            <td>ì</td>\r\n");
      out.write("            <td>í</td>\r\n");
      out.write("            <td>ì</td>\r\n");
      out.write("            <td>ëª©</td>\r\n");
      out.write("            <td>ê¸</td>\r\n");
      out.write("            <td>í </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");

    // ìììì¼ê¹ì§ ì´ë
    for (int i=1; i<bgnWeek; i++) out.println("<td>&nbsp;</td>");

    // ì²«ë ~ë§ì§ë§ë ê¹ì§ ì²ë¦¬
    // - ë ì§ë¥¼ íë£¨ì© ì´ëíì¬ ìì´ ë°ëëê¹ì§ ê·¸ë¦°ë¤
    while (cal.get(Calendar.MONTH) == month) {
        out.println("<td>" + cal.get(Calendar.DATE) + "</td>");

        // í ìì¼ì¸ ê²½ì° ë¤ìì¤ë¡ ìì±
        if (cal.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY) out.println("</tr><tr>");

        // ë ì§ ì¦ê°ìí¤ì§
        cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), cal.get(Calendar.DATE)+1);
    }

    // ëë ë¶í° í ìì¼ê¹ì§ ë¹ì¹¸ì¼ë¡ ì²ë¦¬
    for (int i=cal.get(Calendar.DAY_OF_WEEK); i<=7; i++) out.println("<td>&nbsp;</td>");

      out.write("\r\n");
      out.write("        </tr>\r\n");
      out.write("        </table>\r\n");
      out.write("\r\n");
      out.write("    </td>\r\n");
      out.write("</tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
